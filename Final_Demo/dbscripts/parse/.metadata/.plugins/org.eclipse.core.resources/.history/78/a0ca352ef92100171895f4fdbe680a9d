package parse;

import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.Scanner;

public class Grades{
		
		private Util util;
		private double GPA;
		private ArrayList<Classes> classes;
		private File f;
		private int l;
		public Grades(File file){
			this.classes = new ArrayList<>();
			this.util = new Util();
			this.f = file;
		}
		public double getGPA() {
			return GPA;
		}
		public void setGPA(double gPA) {
			GPA = gPA;
		}
		public ArrayList<Classes> getClasses() {
			return classes;
		}
		public void setClasses(ArrayList<Classes> classes) {
			this.classes = classes;
		}
		public void parseGrades(){
			try {
				Scanner scan = new Scanner(f);
				String line = "";
				int startedGrades = 0;
				int endedGrades = 0;
				while(scan.hasNextLine())
				{
					line = scan.nextLine();
					if(line.contains("[Grades]"))
					{
						startedGrades = 1;
					}
					if(line.contains("GPA") && startedGrades == 1 && endedGrades == 0){
						line = util.trim(line);
						GPA = util.scanDoubleFromString(line);
					}
					if(line.contains("[\\e Grades]"))
					{
						endedGrades = 1;
					}
				}
				if(startedGrades == 0 || endedGrades == 0){
					System.out.println("LOG: Grades section improperly formated.");
				}
				parseClasses(f, 0);
				scan.close();
			} catch (FileNotFoundException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
		}
		private void parseClasses(File f, int start){
			Classes n = new Classes();
			Scanner s;
			int parsing_class = 0;
			try {
				s = new Scanner(f);
				while(s.hasNextLine()){
					String line = s.nextLine();
					if(line.contains("[Class")){
						if(parsing_class == 0){
							parsing_class = 1;
							line = util.trimSq(line);
							int classid = util.scanIntFromString(line);
							n.setClassid(classid);
						}else{
							//previous class is malformed, create new class and start again.
							//do not add
							n = new Classes();
							parsing_class = 1;
							line = util.trimSq(line);
							int classid = util.scanIntFromString(line);
							n.setClassid(classid);
						}
						
					}
					if(line.contains("\\\\") && parsing_class == 1){
						
						parseGradeCategory(line, s, n);
					}
					if(line.contains("[\\e Class]")){
						parsing_class = 0;
						classes.add(n);
						n = new Classes();
					}
				}
			} catch (FileNotFoundException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
			
		}
		private void parseGradeCategory(String line, Scanner s, Classes c){
			line = util.trimSlash(line);
			GradeCategory gc = new GradeCategory();
			Pair<String, Integer> p = util.parseStringAndInt(line);
			gc.setName(p.getKey());
			gc.setWeight(p.getValue());
			while(s.hasNextLine()){
				String l = s.nextLine();
				if(l.contains("{")){
					l = util.trim(l);
					p = util.parseStringAndInt(l);
					gc.addAssignmentGrade(p);
				}
				if(l.contains("\\\\")){
					c.getGradeCategories().add(gc);
					parseGradeCategory(l, s, c);
				}
				if(l.contains("\\e Class")){
					classes.add(c);
					break;
				}
			}
		}
	}