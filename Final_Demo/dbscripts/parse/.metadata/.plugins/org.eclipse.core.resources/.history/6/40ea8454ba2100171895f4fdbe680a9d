package parse;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.InputMismatchException;
import java.util.Scanner;

public class Settings{
	
	private int arr[]= new int[2];
	private int userType = arr[0];
	private int contactType = arr[1];
	private final String USER_DEFAULT = "{userType : NULL}";
	private final String CONTACT_DEFAULT = "{contactType : NULL}";
	private ArrayList<Integer> chats;
	private File file;
	
	public Settings(File f){
		this.chats = new ArrayList<>();
		this.file = f;
	}
	//Example Settings File
	/*
	 * [Settings]
	 * {userType : 0}
	 * {contactType : 0}
	 * {chatid : 12342}
	 * {chatid : 43252}
	 * [\e Settings]
	 */

	public int scanIntType( String key){
		int value = -1; 
		int found = -1;
		Scanner scan;
		try {

			scan = new Scanner(file);
			while(scan.hasNextLine()){
				String line = scan.nextLine();
				if(found == -1 && line.contains(new String("[\\e Settings]"))){
					return found;
				}
				if(found == -1 && line.contains(new String("[Settings]"))){
					line = scan.nextLine();
				}
				if(found == -1 && line.contains(key)){
					line = this.trims(line);
					Scanner s = new Scanner(line);
					s.useDelimiter(key + " : ");
					try{
						if(s.hasNextInt()){
							value = s.nextInt();
						}else{
							if(s.next().equals("NULL")){
								System.out.println("LOG: Key "+ key +" was found but it did not have an int"
										+ " value attached to it. It is the NULL. Update it.");
							}
						}
					}
					catch (InputMismatchException e)
					{
						System.out.println("LOG: Key "+ key +" was found but it did not have an int"
								+ " value attached to it. Might be default. Update it.");
					}

					s.close();
					scan.close();
					found = 0;
					return value;
				}
			}
			scan.close();
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			//e.printStackTrace();
			System.out.println("LOG: File was not found when scanning for settings.");
		}


		return found;
	}
	public String trims(String line){
		if(line.charAt(0) == '{' && line.charAt(line.length()-1) == '}')
		{
			line = line.substring(1, line.length()-1);
		}
		return line;
	}
	/**
	 * 
	 * @param key | The key we are trying to replace
	 * @param def | The default we are tring to write to the buffer 
	 */
	public void writesDefault(String key, String def){
		FileWriter fw;
		int i = 0;
		int j = 0;
		try {
			

			Scanner sc = new Scanner(file);
			String content = "";
			while(sc.hasNextLine()){
				String line = sc.nextLine();
				content += line + "\n";
				if(line.contains("[Settings]")){
					i = 1;
				}
				if(line.contains(key) && i > j){
					content+= "{"+key+" : "+def+"}"+"\n";
				}else{
					System.out.println("LOG: No Begining Settings!");
				}
				if(line.contains("[\\e Settings]") && i > j){
					j = i;
				}
			}
			sc.close();
			fw = new FileWriter(file);

			BufferedWriter bw = new BufferedWriter(fw);
			bw.write(content);
			fw.close();
			bw.close();
			if(j != i){
				System.out.println("LOG: Settings is not properly formed.");
			}
		} catch (IOException e) {
			// TODO Auto-generated catch block
			//e.printStackTrace();
			System.out.println("LOG: IO Exception was thrown by FilewWriter "
					+ "or BufferedWriter when scanning for key: " + key + " in Settings");
		}
	}
	/**
	 * Scans userType information from file and stores in an int
	 */
	public void scanUserType(){
		int v = this.scanIntType("userType");
		if(v == -1 ){
			this.writesDefault("userType", this.USER_DEFAULT);
		}else{
			this.userType = v;
		}
	}
	/**
	 * Scans contact type information from file and stores into an int
	 */
	public void scanContactType(){
		int v = this.scanIntType("contactType");
		if(v == -1 ){
			this.writesDefault("contactType", this.USER_DEFAULT);
		}else{
			this.contactType = v;
		}
	}
	/**
	 * Scans chat ids from file and stores them in an ArrayList
	 */
	public void scanChats(){
		String key = "chatid";
		Scanner scan;
		try {
			scan = new Scanner(file);
			while(scan.hasNextLine()){
				String line = scan.nextLine();
				if(line.contains(new String("[\\e Settings]"))){
					break;
				}
				if(line.contains(new String("[Settings]"))){
					line = scan.nextLine();
				}
				if(line.contains(key)){
					line = this.trims(line);
					if(!line.contains("chatid : ")){
						System.out.println("chatid in file was poorly formated, ending parse of settings.");
						break;
					};
					Scanner s = new Scanner(line);
					s.useDelimiter(key + " : ");
					try{
						if(s.hasNextInt()){
							this.chats.add(s.nextInt());
						}else{
							if(s.next().equals("NULL")){
								System.out.println("LOG: Key "+ key +" was found but it did not have an int"
										+ " value attached to it. It is the NULL. Update it.");
							}
						}
					}
					catch (InputMismatchException e)
					{
						System.out.println("LOG: Key "+ key +" was found but it did not have an int"
								+ " value attached to it. Might be default. Update it.");
					}

					s.close();
				}
			}
			scan.close();
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			//e.printStackTrace();
			System.out.println("LOG: File was not found when scanning for settings.");
		}
	}
	public void scanSettings(){
		this.scanUserType();
		this.scanContactType();
		this.scanChats();	
		System.out.println("Scan Complete!");
		System.out.println(this.userType + "\\userType");
		System.out.println(this.contactType+ "\\contactType");
		System.out.println(this.chats.toString());
	}
}